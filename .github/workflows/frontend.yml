# week08/.github/workflows/frontend.yml

name: Frontend CI/CD 

on:
  workflow_call:
    inputs:
      aks_cluster_name:
        required: false
        type: string
      aks_resource_group:
        required: false
        type: string
    secrets:
      AZURE_CREDENTIALS:
        required: true
      AZURE_CONTAINER_REGISTRY:
        required: true
  workflow_dispatch:            
    inputs:
      aks_cluster_name:
        required: true
        default: 'wk8busayo-aks'
      aks_resource_group:
        required: true
        default: 'wk8busayo-rg'
  push:
    branches: [main, development]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'


jobs:
  gate:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.set.outputs.should_deploy }}
    steps:
      - name: Decide if we should deploy
        id: set
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" = "push" ]; then
            echo "should_deploy=true" >> "$GITHUB_OUTPUT"
          else
            echo "should_deploy=false" >> "$GITHUB_OUTPUT"
          fi
    if: ${{ github.event_name != 'workflow_call' }}

  frontend_build_and_deploy:
    needs: [gate]
    if: ${{ github.event_name == 'workflow_call' || needs.gate.outputs.should_deploy == 'true' }}
    runs-on: ubuntu-latest
    env:
      ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
      IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}
      AKS_RG: ${{ inputs.aks_resource_group || github.event.inputs.aks_resource_group || vars.AKS_RG || secrets.AKS_RG }}
      AKS_CLUSTER: ${{ inputs.aks_cluster_name || github.event.inputs.aks_cluster_name || vars.AKS_CLUSTER || secrets.AKS_CLUSTER }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get AKS credentials
        run: az aks get-credentials --resource-group "$AKS_RG" --name "$AKS_CLUSTER" --overwrite-existing

      - name: Get Backend Service IPs
        id: backend_ips
        run: |
          echo "Waiting for Product and Order service IPs..."
          for i in {1..60}; do
            PRODUCT_IP=$(kubectl get svc product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            ORDER_IP=$(kubectl get svc order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
              echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV
              echo "product_ip=$PRODUCT_IP" >> $GITHUB_OUTPUT
              echo "order_ip=$ORDER_IP" >> $GITHUB_OUTPUT
              break
            fi
            sleep 5
          done
          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Error: Backend IPs not assigned"
            exit 1
          fi

      - name: Inject backend IPs into frontend/main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|http://${PRODUCT_IP}:8000|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|http://${ORDER_IP}:8000|g" frontend/main.js
          cat frontend/main.js

      - name: Azure Login (for build/push & deploy)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate AKS configuration
        run: |
          if [ -z "$AKS_RG" ] || [ -z "$AKS_CLUSTER" ]; then
            echo "AKS_RG/AKS_CLUSTER not set. Set repo variables (AKS_RG, AKS_CLUSTER) or supply workflow_dispatch inputs." >&2
            exit 1
          fi

      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}

      - name: Deploy Frontend
        run: |
          kubectl apply -f k8s/frontend.yaml

      - name: Set frontend image to CI tag
        run: |
          kubectl set image deploy/frontend frontend-container=${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}

      - name: Wait for Frontend LoadBalancer IP
        id: frontend_ip
        run: |
          echo "Waiting for frontend external IP..."
          for i in {1..60}; do
            IP=$(kubectl get svc frontend-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [ -z "$IP" ]; then
              HOST=$(kubectl get svc frontend-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            fi
            if [ -n "$IP" ] || [ -n "$HOST" ]; then
              VAL=${IP:-$HOST}
              echo "Frontend external address: $VAL"
              echo "FRONTEND_ADDR=$VAL" >> "$GITHUB_ENV"
              echo "addr=$VAL" >> "$GITHUB_OUTPUT"
              echo "Frontend URL: http://$VAL"
              echo "Frontend URL: http://$VAL" >> "$GITHUB_STEP_SUMMARY"
              exit 0
            fi
            sleep 5
          done
          echo "Error: Frontend external address not assigned in time" >&2
          exit 1

      - name: Logout from Azure
        run: az logout
        if: always()
