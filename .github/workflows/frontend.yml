# week08/.github/workflows/frontend.yml

name: Frontend CI/CD 

on:
  workflow_dispatch:            
    inputs:
      aks_cluster_name:
        required: true
        default: 'wk8busayo-aks'
      aks_resource_group:
        required: true
        default: 'wk8busayo-rg'
      aks_acr_name:
        required: true
        default: 'wk8busayoacr'

  push:
    branches: [main]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend.yml'
  pull_request:
    branches: [development] 


jobs:
  call_backend:
    name: Call backend reusable workflow
    uses: ./.github/workflows/backend.yml
    with:
      aks_cluster_name: ${{ github.event.inputs.aks_cluster_name || vars.AKS_CLUSTER }}
      aks_resource_group: ${{ github.event.inputs.aks_resource_group || vars.AKS_RG }}
      aks_acr_name: ${{ github.event.inputs.aks_acr_name || vars.ACR_NAME }}
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

  frontend_build_and_deploy:
    needs: call_backend
    runs-on: ubuntu-latest
    env:
      ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
      IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get backend IPs from backend job outputs
        run: |
          echo "Product IP from backend job: ${{ needs.call_backend.outputs.product_ip }}"
          echo "Order IP from backend job: ${{ needs.call_backend.outputs.order_ip }}"

      - name: Inject backend IPs into frontend/main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|${{ needs.call_backend.outputs.product_ip }}|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|${{ needs.call_backend.outputs.order_ip }}|g" frontend/main.js
          cat frontend/main.js

      - name: Azure Login (for build/push & deploy)
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}

      - name: Get AKS credentials
        run: az aks get-credentials --resource-group ${{ github.event.inputs.aks_resource_group || vars.AKS_RG }} --name ${{ github.event.inputs.aks_cluster_name || vars.AKS_CLUSTER }} --overwrite-existing

      - name: Deploy Frontend
        run: |
          kubectl apply -f k8s/frontend.yaml

      - name: Wait for Frontend LoadBalancer IP
        id: frontend_ip
        run: |
          echo "Waiting for frontend external IP..."
          for i in {1..60}; do
            IP=$(kubectl get svc frontend-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [ -z "$IP" ]; then
              HOST=$(kubectl get svc frontend-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            fi
            if [ -n "$IP" ] || [ -n "$HOST" ]; then
              VAL=${IP:-$HOST}
              echo "Frontend external address: $VAL"
              echo "FRONTEND_ADDR=$VAL" >> "$GITHUB_ENV"
              echo "addr=$VAL" >> "$GITHUB_OUTPUT"
              echo "Frontend URL: http://$VAL"
              echo "Frontend URL: http://$VAL" >> "$GITHUB_STEP_SUMMARY"
              exit 0
            fi
            sleep 5
          done
          echo "Error: Frontend external address not assigned in time" >&2
          exit 1
    
      - name: Logout from Azure
        run: az logout
        if: always()
